package fr.devnewton.hoerbertgui;

import fr.devnewton.hoerbertgui.utils.FilesSelection;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.TransferHandler;

public class PlaylistPanel extends javax.swing.JPanel {

    private DefaultListModel<File> playlistModel;

    /**
     * Creates new form PlaylistPanel
     */
    public PlaylistPanel() {
        initComponents();
        initPlaylist();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playlist = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jButton2 = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        playlist.setDragEnabled(true);
        playlist.setDropMode(javax.swing.DropMode.INSERT);
        playlist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                playlistKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(playlist);

        add(jScrollPane1);

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 0));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(filler1);

        jButton2.setText("Retour");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void playlistKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playlistKeyReleased
       if(evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
           this.playlist.clearSelection();
       }
    }//GEN-LAST:event_playlistKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<File> playlist;
    // End of variables declaration//GEN-END:variables

    private void initPlaylist() {
        this.playlistModel = new DefaultListModel<>();
        playlist.setModel(playlistModel);
        playlist.setDragEnabled(true);
        playlist.setTransferHandler(new TransferHandler() {

            @Override
            public boolean canImport(TransferHandler.TransferSupport support) {
                return support.isDrop() && support.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
            }

            @Override
            public boolean importData(TransferHandler.TransferSupport support) {
                if (!canImport(support)) {
                    return false;
                }
                try {
                    JList.DropLocation location = (JList.DropLocation) support.getDropLocation();
                    List<File> files = (List<File>) support.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    if (support.getDropAction() == MOVE) {
                        for (File file : files) {
                            playlistModel.removeElement(file);
                        }
                    }
                    int index = location.getIndex();
                    if (index < 0) {
                        index = 0;
                    }
                    if (index > playlistModel.size()) {
                        index = playlistModel.size();
                    }
                    playlistModel.addAll(index, files);
                } catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(PlaylistPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                return false;
            }

            @Override
            protected Transferable createTransferable(JComponent source) {
                JList<File> sourceList = (JList<File>) source;
                List<File> files = sourceList.getSelectedValuesList();
                Transferable t = new FilesSelection(files);
                return t;
            }

            @Override
            public int getSourceActions(JComponent c) {
                return COPY_OR_MOVE;
            }

        });
    }

    File[] getPlaylistFiles() {
        File[] playlistFiles = new File[playlistModel.size()];
        for(int i=0; i<playlistFiles.length; ++i) {
            playlistFiles[i] = playlistModel.get(i);
        }
        return playlistFiles;
    }

}
