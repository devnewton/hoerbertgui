package fr.devnewton.hoerbertgui;

import fr.devnewton.hoerbertgui.io.HoerbertIO;
import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

public class HoerbertApp extends javax.swing.JFrame {

    /**
     * Creates new form HoerbertguiMain
     */
    public HoerbertApp() {
        initComponents();
        this.hoerbertIO.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if(HoerbertIO.PROP_SDCARD.equals(evt.getPropertyName())) {
                this.statusLabel.setText(null != evt.getNewValue() ? evt.getNewValue().toString() : "");
            }
        });
        this.hoerbertIO.detectSdcard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sdcardFileChooser = new javax.swing.JFileChooser();
        hoerbertIO = new fr.devnewton.hoerbertgui.io.HoerbertIO();
        mainPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        violetButton = new javax.swing.JButton();
        rougeButton = new javax.swing.JButton();
        bleuFonceButton = new javax.swing.JButton();
        vertClairButton = new javax.swing.JButton();
        jauneButton = new javax.swing.JButton();
        turquoiseButton = new javax.swing.JButton();
        bleuClairButton = new javax.swing.JButton();
        orangeButton = new javax.swing.JButton();
        vertFonceButton = new javax.swing.JButton();
        violetPlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        rougePlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        bleuFoncePlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        vertClairPlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        jaunePlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        turquoisePlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        bleuClairPlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        orangePlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        vertFoncePlaylist = new fr.devnewton.hoerbertgui.PlaylistPanel();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        selectSDCardMenuItem = new javax.swing.JMenuItem();
        writeToSDCardMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        sdcardFileChooser.setDialogTitle("Choisissez le dossier de la carte SD");
        sdcardFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        mainPanel.setLayout(new java.awt.CardLayout());

        buttonsPanel.setLayout(new java.awt.GridLayout(3, 3));

        violetButton.setBackground(new java.awt.Color(120, 88, 155));
        violetButton.setText("Violet");
        violetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                violetButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(violetButton);

        rougeButton.setBackground(new java.awt.Color(194, 14, 26));
        rougeButton.setText("Rouge");
        rougeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rougeButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(rougeButton);

        bleuFonceButton.setBackground(new java.awt.Color(48, 56, 128));
        bleuFonceButton.setText("Bleu foncé");
        bleuFonceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bleuFonceButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(bleuFonceButton);

        vertClairButton.setBackground(new java.awt.Color(161, 192, 55));
        vertClairButton.setText("Vert clair");
        vertClairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertClairButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(vertClairButton);

        jauneButton.setBackground(new java.awt.Color(242, 204, 19));
        jauneButton.setText("Jaune");
        jauneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jauneButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(jauneButton);

        turquoiseButton.setBackground(new java.awt.Color(141, 167, 204));
        turquoiseButton.setText("Turquoise");
        turquoiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turquoiseButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(turquoiseButton);

        bleuClairButton.setBackground(new java.awt.Color(0, 157, 224));
        bleuClairButton.setText("Bleu clair");
        bleuClairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bleuClairButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(bleuClairButton);

        orangeButton.setBackground(new java.awt.Color(226, 150, 66));
        orangeButton.setText("Orange");
        orangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orangeButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(orangeButton);

        vertFonceButton.setBackground(new java.awt.Color(40, 119, 62));
        vertFonceButton.setText("Vert foncé");
        vertFonceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertFonceButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(vertFonceButton);

        mainPanel.add(buttonsPanel, "buttons");

        violetPlaylist.setBackground(new java.awt.Color(120, 88, 155));
        violetPlaylist.setName(""); // NOI18N
        mainPanel.add(violetPlaylist, "violet");

        rougePlaylist.setBackground(new java.awt.Color(194, 14, 26));
        rougePlaylist.setName(""); // NOI18N
        mainPanel.add(rougePlaylist, "rouge");

        bleuFoncePlaylist.setBackground(new java.awt.Color(48, 56, 128));
        bleuFoncePlaylist.setName(""); // NOI18N
        mainPanel.add(bleuFoncePlaylist, "bleuFonce");

        vertClairPlaylist.setBackground(new java.awt.Color(161, 192, 55));
        vertClairPlaylist.setName(""); // NOI18N
        mainPanel.add(vertClairPlaylist, "vertClair");

        jaunePlaylist.setBackground(new java.awt.Color(242, 204, 19));
        jaunePlaylist.setName(""); // NOI18N
        mainPanel.add(jaunePlaylist, "jaune");

        turquoisePlaylist.setBackground(new java.awt.Color(141, 167, 204));
        turquoisePlaylist.setName(""); // NOI18N
        mainPanel.add(turquoisePlaylist, "turquoise");

        bleuClairPlaylist.setBackground(new java.awt.Color(0, 157, 224));
        bleuClairPlaylist.setName(""); // NOI18N
        mainPanel.add(bleuClairPlaylist, "bleuClair");

        orangePlaylist.setBackground(new java.awt.Color(226, 150, 66));
        orangePlaylist.setName(""); // NOI18N
        mainPanel.add(orangePlaylist, "orange");

        vertFoncePlaylist.setBackground(new java.awt.Color(40, 119, 62));
        vertFoncePlaylist.setName(""); // NOI18N
        mainPanel.add(vertFoncePlaylist, "vertFonce");

        getContentPane().add(mainPanel);

        statusPanel.setMaximumSize(new java.awt.Dimension(32767, 0));

        statusLabel.setText("Pas de carte SD?");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(statusPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(statusLabel)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(statusPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(statusLabel)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(statusPanel);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Carte SD");

        selectSDCardMenuItem.setMnemonic('a');
        selectSDCardMenuItem.setText("Choisir la carte SD");
        selectSDCardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSDCardMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(selectSDCardMenuItem);

        writeToSDCardMenuItem.setMnemonic('a');
        writeToSDCardMenuItem.setText("Ecrire les listes de lecture");
        writeToSDCardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeToSDCardMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(writeToSDCardMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Quitter");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rougeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rougeButtonActionPerformed
        showInMainPanel("rouge");
    }//GEN-LAST:event_rougeButtonActionPerformed

    private void violetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_violetButtonActionPerformed
        showInMainPanel("violet");
    }//GEN-LAST:event_violetButtonActionPerformed

    private void bleuFonceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bleuFonceButtonActionPerformed
        showInMainPanel("bleuFonce");
    }//GEN-LAST:event_bleuFonceButtonActionPerformed

    private void vertClairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertClairButtonActionPerformed
        showInMainPanel("vertClair");
    }//GEN-LAST:event_vertClairButtonActionPerformed

    private void jauneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jauneButtonActionPerformed
        showInMainPanel("jaune");
    }//GEN-LAST:event_jauneButtonActionPerformed

    private void turquoiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turquoiseButtonActionPerformed
        showInMainPanel("turquoise");
    }//GEN-LAST:event_turquoiseButtonActionPerformed

    private void bleuClairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bleuClairButtonActionPerformed
        showInMainPanel("bleuClair");
    }//GEN-LAST:event_bleuClairButtonActionPerformed

    private void orangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orangeButtonActionPerformed
        showInMainPanel("orange");
    }//GEN-LAST:event_orangeButtonActionPerformed

    private void vertFonceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertFonceButtonActionPerformed
        showInMainPanel("vertFonce");
    }//GEN-LAST:event_vertFonceButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void writeToSDCardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeToSDCardMenuItemActionPerformed
        File[][] playlists = new File[][] {
            this.violetPlaylist.getPlaylistFiles(),
            this.rougePlaylist.getPlaylistFiles(),
            this.bleuFoncePlaylist.getPlaylistFiles(),
            this.vertClairPlaylist.getPlaylistFiles(),
            this.jaunePlaylist.getPlaylistFiles(),
            this.turquoisePlaylist.getPlaylistFiles(),
            this.bleuClairPlaylist.getPlaylistFiles(),
            this.orangePlaylist.getPlaylistFiles(),
            this.vertFoncePlaylist.getPlaylistFiles()
        };
       hoerbertIO.writePlaylist(playlists);
    }//GEN-LAST:event_writeToSDCardMenuItemActionPerformed

    private void selectSDCardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSDCardMenuItemActionPerformed
        if(this.sdcardFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                this.hoerbertIO.setSdcard(this.sdcardFileChooser.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger(HoerbertApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_selectSDCardMenuItemActionPerformed

    public void showInMainPanel(String cardName) {
        CardLayout layout = (CardLayout) this.mainPanel.getLayout();
        layout.show(this.mainPanel, cardName);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoerbertApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoerbertApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoerbertApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoerbertApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HoerbertApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bleuClairButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel bleuClairPlaylist;
    private javax.swing.JButton bleuFonceButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel bleuFoncePlaylist;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private fr.devnewton.hoerbertgui.io.HoerbertIO hoerbertIO;
    private javax.swing.JButton jauneButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel jaunePlaylist;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton orangeButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel orangePlaylist;
    private javax.swing.JButton rougeButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel rougePlaylist;
    private javax.swing.JFileChooser sdcardFileChooser;
    private javax.swing.JMenuItem selectSDCardMenuItem;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton turquoiseButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel turquoisePlaylist;
    private javax.swing.JButton vertClairButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel vertClairPlaylist;
    private javax.swing.JButton vertFonceButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel vertFoncePlaylist;
    private javax.swing.JButton violetButton;
    private fr.devnewton.hoerbertgui.PlaylistPanel violetPlaylist;
    private javax.swing.JMenuItem writeToSDCardMenuItem;
    // End of variables declaration//GEN-END:variables

}
